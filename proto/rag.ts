// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/rag.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "rag";

export interface StorePdfRequest {
  filePath: string;
}

export interface Document {
  id: string;
  text: string;
  source: string;
}

export interface StoreRequest {
  documents: Document[];
}

export interface StoreResponse {
  message: string;
}

export interface DeleteRequest {
  documentId: string;
}

export interface DeleteResponse {
  message: string;
}

export interface FindRequest {
  query: string;
  k: number;
}

export interface FindResponse {
  results: string[];
}

export const RAG_PACKAGE_NAME = "rag";

export interface WeaviateServiceClient {
  storePdfDocument(request: StorePdfRequest): Observable<StoreResponse>;

  storeDocument(request: StoreRequest): Observable<StoreResponse>;

  deleteDocument(request: DeleteRequest): Observable<DeleteResponse>;

  findSimilar(request: FindRequest): Observable<FindResponse>;
}

export interface WeaviateServiceController {
  storePdfDocument(request: StorePdfRequest): Promise<StoreResponse> | Observable<StoreResponse> | StoreResponse;

  storeDocument(request: StoreRequest): Promise<StoreResponse> | Observable<StoreResponse> | StoreResponse;

  deleteDocument(request: DeleteRequest): Promise<DeleteResponse> | Observable<DeleteResponse> | DeleteResponse;

  findSimilar(request: FindRequest): Promise<FindResponse> | Observable<FindResponse> | FindResponse;
}

export function WeaviateServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["storePdfDocument", "storeDocument", "deleteDocument", "findSimilar"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("WeaviateService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("WeaviateService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WEAVIATE_SERVICE_NAME = "WeaviateService";
